<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_8946_useronboard.userOnboardingUtils</api_name>
        <client_callable>true</client_callable>
        <description>contains methods:&#13;
</description>
        <name>userOnboardingUtils</name>
        <script><![CDATA[var userOnboardingUtils = Class.create();
userOnboardingUtils.prototype = {
	initialize: function(myObj) {
		this.history = {};
		this.gr = myObj;
		this.memberTable = 'sys_user_grmember';
		this.taskTable = 'task';
		this.servicedesk = gs.getProperty('x_8946_useronboard.group.servicedesk.sys_id'); 
		// 'd625dccec0a8016700a222a0f7900d06'; 
		
		this.roleTable = 'sys_user_has_role';		
		this.acceptanceTable = 'x_8946_useronboard_user_acceptance';
		this.requestTable = 'sc_req_item';
	},
	
	
	saveAndSetField : function(fieldName, newValue) {
		// hash array represented as dotted notation
		this.history[fieldName] = this.gr.getValue(fieldName);
		this.gr.setValue(fieldName, newValue);
		// we are getting a copy of the REFERENCE
		// set values on the gr	
	},
	
	
	getHistoryJSON : function() {
		var historyJSON = new global.JSON().encode(this.history);
		return historyJSON;
	},
	
	
	restoreHistory : function(fieldName) {
		this.history = new global.JSON.parse(this.gr.getValue(fieldName));
	},
	
	
	restoreField : function(fieldName) {
		this.gr.setValue(fieldName, this.history[fieldName]);
	},
	
	
	saveGroupMemberships : function() {
		// write the group memberships to the json history field and delete them
		this.history.group = [];
		var gr = new GlideRecord(this.memberTable);
		gr.addQuery('user', this.gr.getValue('sys_id'));
		gr.query();
		while (gr.next()) {
			this.history.group.push(gr.getValue('group'));
			gr.deleteRecord();
		}
	},
	
	
	restoreGroupMemberships : function() {
		// when reactivating user, restore their group memberships from the json history field
		
		if (!this.history)
			return;
		
		if (!this.history.group)
			return;
		
		if (this.history.group.length == 0)
			return;
		
		for (var i = 0; i < this.history.group.length; i++) {
			var gr = new GlideRecord(this.memberTable);
			// create a record with default values
			gr.newRecord();
			gr.user = this.gr.getValue('sys_id');
			gr.group = this.history.group[i];
			gr.insert();
		}
	},
	
	
	clearAssignments : function() {
			// 	call when user gets deactivated
			// find active tasks assigned to user	
			// but not vtb_task (private tasks) --tgbates 2018/02/01
			var gr = new GlideRecord(this.taskTable);
			gr.addQuery('assigned_to', this.gr.getValue('sys_id'));
			gr.addQuery('active', true);
    		gr.addQuery('sys_class_name', '!=', 'vtb_task');
			gr.query();
			while (gr.next()) {
				// need to impersonate sysadmin account here ***
				gr.work_notes = 'This was an active task assigned to ' + gr.assigned_to.getDisplayValue() + ', who is now GONE.  It has been deassigned so it can be assigned to someone else.  --System Administrator';
				gs.info('userOnboardingUtils.clearAssignments: Task is ' + gr.number + ' ' + gr.assigned_to.getDisplayValue());
				// check for assignment group
				if (gr.assignment_group) {
					gs.info('userOnboardingUtils.clearAssignments: Assignment Group is ' + gr.assignment_group.getDisplayValue());
					// mark assigned to as empty (as long as there is an assignment group)
					gr.setValue('assigned_to', '');
					gr.update();					
				}
				else {
					// if there is no assignment group, assign to service desk
					gr.setValue('assigned_to', '');
					gr.setValue('assignment_group', this.servicedesk);
					gs.info('userOnboardingUtils.clearAssignments: Assignment Group is ' + gr.assignment_group.getDisplayValue());
					gr.update();
				}
			}	
		},
	
	clearRoles : function() {
		// remove any roles directly assigned to user; should only be done through group membership		
		var gr = new GlideRecord(this.roleTable);
		gr.addQuery('user', this.gr.getValue('sys_id'));
		gr.query();
		while (gr.next()) {
			//this.history.group.push(gr.getValue('group'));
			gs.info('userOnboardingUtils.clearRoles: Removing role ' + gr.role.getDisplayValue() + ' from ' + gr.user.getDisplayValue());
			gr.deleteRecord();
		}
		
	},
	
	matchEmail : function(str) {
		// given an email address, return sys_user record with that email address
		var q = 'emailLIKE' + str;
		gs.info('userOnboardingUtils.matchEmail: Given ' + str + ', search for ' + q + ' on table sys_user');
		var gr = new GlideRecord('sys_user');
		gr.addActiveQuery();
		gr.addEncodedQuery(q);
		gr.query();
		if (gr.next()) {
			gs.info('userOnboardingUtils.matchEmail: ' + str + ' for ' + gr.name + ' FOUND');
			return gr;
		}
		else {
			gs.info('userOnboardingUtils.matchEmail: NO GR.NEXT for ' + str + ' and ' + q);
			return false;
		}
	},
	


	lookupUserAcceptance: function() {
		// has user already accepted policy?
		// if so, bypass acceptance this time
		var gr = new GlideRecord(this.acceptanceTable);
		gr.addQuery('user', this.gr.getValue('sys_id'));
		gr.addQuery('active', true);  // I can foresee acceptance expiring after a time period or something
		gr.query();
		if (gr.next())
			return true; 
		else return false;
	},

	saveUserAcceptance : function(requestItem, user, userName, userID, userEmail, signedDate) {
		// write the user's acceptance to the acceptanceTable
		// create a record with default values
		var gr = new GlideRecord(this.acceptanceTable);
		gr.newRecord();
		gr.request_item = requestItem;
		if (user) {
			gr.user = user;  // reference field 
		}
		gr.name = userName;  
		gr.id = userID;  
		gr.email = userEmail;
		gr.active = true;
		gr.acceptance_date = signedDate;
		gr.insert();
	},



	
	type: 'userOnboardingUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-05-17 20:00:44</sys_created_on>
        <sys_id>912f24070f021300a884943be1050e0e</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>userOnboardingUtils</sys_name>
        <sys_package display_value="User Onboarding" source="x_8946_useronboard">992e24430f021300a884943be1050e52</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="User Onboarding">992e24430f021300a884943be1050e52</sys_scope>
        <sys_update_name>sys_script_include_912f24070f021300a884943be1050e0e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-05-17 20:22:17</sys_updated_on>
    </sys_script_include>
</record_update>
